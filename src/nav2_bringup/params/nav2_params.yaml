amcl: #ระบุตำแหน่งของหุ่นยนต์ในแผนที่ Adaptive Monte-Carlo Localizer
  ros__parameters: 
  #ค่าพารามิเตอร์หรือ การกำหนดค่าของ Ros

    use_sim_time: False 
    # เป็นการกำหนดให้เวลาที่ใช้ในการทำ simulation เป็นเวลาจริง เพื่อให้สามารถใช้ข้อมูลเวลาจริงได้ในการประมวลผล false = ปิด true = เปิด

    alpha1: 0.2 
    # alpha1: เป็นค่าพารามิเตอร์ที่ใช้ในการปรับความไม่แน่นอนของการเคลื่อนที่ของหุ่นยนต์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน x

    alpha2: 0.2 
    # alpha2: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับความเร็วในการหมุนของหุ่นยนต์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน y

    alpha3: 0.2 
    # alpha3: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับการเปลี่ยนแปลงในการหมุนของหุ่นยนต์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน z

    alpha4: 0.2 
    # alpha4: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับการวัดระยะห่างด้วยเซ็นเซอร์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน x,y,z

    alpha5: 0.2 
    # alpha5: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับการวัดระยะห่างด้วยเซ็นเซอร์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกนการหมุนของหุ่นยนต์ 
    
    base_frame_id: "base_link" 
    # ระบุชื่อของ frame หรือ coordinate system ที่ใช้เป็นตัวอ้างอิงในการติดตามตำแหน่งของหุ่นยนต์ ซึ่งในที่นี้คือ "base_link" 

    beam_skip_distance: 0.5
    # เป็นระยะห่างระหว่างการส่ง beam ที่ใช้ในการสแกนแผนที่ หากหุ่นยนต์เคลื่อนที่เป็นระยะทางน้อยกว่า beam_skip_distance และยังไม่มีอุปสรรคของสิ่งกีดขวางในเส้นทางหุ่นยนต์จะไม่สแกนแผนที่ แต่จะเคลื่อนไปต่อไปโดยไม่ต้องทำการสแกน
    
    beam_skip_error_threshold: 0.9
    # เป็นค่าที่ใช้ในการกำหนด threshold ของความคลาดเคลื่อนที่สามารถยอมรับได้ในการทำนายตำแหน่งของหุ่นยนต์ หากความคลาดเคลื่อนของการทำนายตำแหน่งของหุ่นยนต์มีค่าต่ำกว่า beam_skip_error_threshold หุ่นยนต์จะทำการสแกนแผนที่
    
    beam_skip_threshold: 0.3
    # เป็นค่า threshold ที่ใช้ในการกำหนดความแม่นยำของการสแกนแผนที่ หากค่าความแม่นยำของการสแกนแผนที่มีค่ามากกว่า beam_skip_threshold หุ่นยนต์จะทำการสแกนแผนที่
    
    do_beamskip: false
    # เป็นค่า boolean ที่ใช้กำหนดว่าหุ่นยนต์จะใช้ beamskip หรือไม่ หากเป็นค่า true หุ่นยนต์จะใช้ beamskip เพื่อลดความซับซ้อนในการสแกนแผนที่ แต่หากเป็นค่า false หุ่นยนต์จะสแกนแผนที่ทุกจุดที่เดินทางผ่าน

    global_frame_id: "map"
    # เป็นชื่อของ global frame หรือ coordinate system ที่ใช้เป็นตัวอ้างอิงในการกำหนดตำแหน่งของหุ่นยนต์บนแผนที่ ซึ่งในที่นี้คือ "map"

    lambda_short: 0.1
    # เป็นค่าพารามิเตอร์ที่ใช้ในการปรับเปลี่ยนน้ำหนักของการทำนายตำแหน่งหากมีการวัดความสั้นโดยไม่สามารถตรวจจับสิ่งกีดขวางได้ โดยที่ค่า lambda_short มากขึ้นจะทำให้เพิ่มความเชื่อถือในการทำนายตำแหน่งของหุ่นยนต์เมื่อไม่สามารถตรวจจับสิ่งกีดขวางได้

    laser_likelihood_max_dist: 2.0
    # เป็นระยะทางสูงสุดที่หุ่นยนต์สามารถเลือกใช้ค่าความน่าจะเป็นในการตัดสินใจว่าสิ่งกีดขวางอยู่ในพื้นที่ตรวจจับของเลเซอร์สแกนเท่านั้น โดยหากสิ่งกีดขวางอยู่ห่างจากหุ่นยนต์มากกว่าระยะทางนี้จะไม่มีผลกับการตัดสินใจ

    laser_max_range: 4.0
    # เป็นระยะทางสูงสุดที่เลเซอร์สแกนสามารถตรวจจับข้อมูลได้

    laser_min_range: -1.0
    # เป็นระยะทางต่ำสุดที่เลเซอร์สแกนตรวจจับข้อมูลได้

    laser_model_type: "likelihood_field"
    # เป็นโมเดลที่ใช้ในการคำนวณความน่าจะเป็นของตำแหน่งของหุ่นยนต์ตามข้อมูลที่ได้รับจากเลเซอร์สแกน โดยในที่นี้เป็น "likelihood_field" ซึ่งเป็นโมเดลที่ใช้แผนที่ของฟิลด์ความน่าจะเป็นในการคำนวณความน่าจะเป็นของตำแหน่งของหุ่นยนต์และข้อมูลจากเลเซอร์สแกน

    max_beams: 60
    # เป็นจำนวนสูงสุดของแสงเลเซอร์ที่ใช้ในการสร้างแผนที่ลักษณะเส้นทางเพื่อใช้ในการประมาณตำแหน่งของหุ่นยนต์

    max_particles: 2000
    # เป็นจำนวนสูงสุดของอนุภาคที่ระบบจะใช้ในการประมาณค่าตำแหน่งของหุ่นยนต์

    min_particles: 500
    # เป็นจำนวนต่ำสุดของอนุภาคที่ระบบจะใช้ในการประมาณค่าตำแหน่งของหุ่นยนต์ หากจำนวนอนุภาคน้อยกว่าจำนวนนี้ ระบบจะทำการสร้างอนุภาคเพิ่มเติมเพื่อให้จำนวนอนุภาคมากขึ้นในขณะที่ระบบพยายามปรับปรุงค่าความน่าจะเป็นในการหาตำแหน่งของหุ่นยนต์ให้แม่นยำมากขึ้น

    odom_frame_id: "odom"
    # เป็น ID ของกรอบอ้างอิง odom (odometry) ที่ใช้ในการประมาณตำแหน่งของหุ่นยนต์
    
    pf_err: 0.05
    # เป็นค่าความคลาดเคลื่อนของอนุภาคที่ระบบใช้ในการสร้างแผนที่ลักษณะเส้นทาง ค่านี้เป็นตัวกำหนดความเป็นไปได้ในการตำแหน่งของหุ่นยนต์

    pf_z: 0.99
    # เป็นค่าที่ใช้ในการปรับความน่าจะเป็นของแต่ละอนุภาค ค่านี้เป็นตัวกำหนดความน่าจะเป็นในการหาตำแหน่งของหุ่นยนต์

    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    # เป็นค่าที่ใช้ในการกู้คืนตำแหน่งเมื่อหุ่นยนต์พบกับปัญหาในการทำงาน เช่น ถูกขว้างออกจากตำแหน่งที่ถูกต้อง ค่าเหล่านี้เป็นตัวกำหนดความเร็วของการเคลื่อนไหวในการกู้คืนตำแหน่ง

    resample_interval: 1
    # เป็นช่วงเวลาที่ระบบจะทำการสุ่มเลือกอนุภาคใหม่ในกรณีที่จำนวนอนุภาคไม่พอดีกับความต้องการของระบบในการประมาณค่าตำแหน่งของหุ่นยนต์ ค่านี้จะกำหนดว่าอนุภาคจะถูกสุ่มเลือกใหม่ทุกๆ กี่รอบการทำงานของระบบ โดยค่าที่แนะนำคือ 1 หมายความว่าระบบจะทำการสุ่มเลือกอนุภาคใหม่ทุกๆ รอบการทำงานของระบบ

    pf_err: 0.05
    # ค่าความคลาดเคลื่อนของจำนวนพาร์ทิเคิลที่ถูกสุ่มในกระบวนการปรับปรุงตำแหน่งของหุ่นยนต์ โดยค่านี้จะช่วยกำหนดการกระจายของพาร์ทิเคิลและมีผลต่อความแม่นยำในการตำแหน่งของหุ่นยนต์

    pf_z: 0.99
    # ค่าน้ำหนักสูงสุดของลักษณะที่จะถูกใช้ในการปรับปรุงตำแหน่ง โดยค่านี้จะมีผลต่อความถูกต้องของการประมาณตำแหน่งของหุ่นยนต์

    recovery_alpha_fast: 0.0    
    recovery_alpha_slow: 0.0
    # ป็นค่าที่ใช้กำหนดการจัดการสภาวะผิดปกติของหุ่นยนต์ เช่น การล้ม โดยค่าเหล่านี้จะช่วยให้ AMCL สามารถปรับปรุงตำแหน่งของหุ่นยนต์ให้ถูกต้องได้

    resample_interval: 1
    # ค่าที่ใช้กำหนดช่วงเวลาในการทำการสุ่มพาร์ทิเคิลใหม่เพื่อปรับปรุงตำแหน่งของหุ่นยนต์ ในที่นี้จะทำการสุ่มพาร์ทิเคิลใหม่เป็นจำนวนครั้งละ 1 ครั้ง

    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    # คือการกำหนดโมเดลของหุ่นยนต์ที่ใช้ในการทำนายการเคลื่อนที่ ในที่นี้เป็น Differential Motion Model ซึ่งใช้ข้อมูลเซ็นเซอร์เลเซอร์สแกนของหุ่นยนต์ในการทำนายตำแหน่ง

    save_pose_rate: 0.5
    # คืออัตราการบันทึกที่เครื่องหมายเดียวกันในแผนที่ภายใน ROS

    sigma_hit: 0.2
    # คือค่าส่วนเบี่ยงเบนจากการเปรียบเทียบระยะห่างจากข้อมูลเซ็นเซอร์เลเซอร์สแกน (observed) กับแผนที่ (expected)

    tf_broadcast: true
    # คือการเปิดใช้งานการส่งข้อมูลของระบบจัดการตำแหน่งใน ROS (tf) ซึ่งใช้ในการเชื่อมต่อระหว่างฐาน (base) และเซนเซอร์หรืออุปกรณ์ต่างๆ

    transform_tolerance: 1.0
    # คือค่าที่ใช้กำหนดให้ระบบจัดการตำแหน่งใน ROS มีความยืดหยุ่นในการส่งข้อมูลตำแหน่งได้ 1 วินาที

    update_min_a: 0.2
    update_min_d: 0.25
    # คือค่า threshold ในการปรับปรุงค่าความน่าจะเป็น (likelihood) ของสถานะต่างๆของพาหนะ ในแต่ละเวลาที่มีการสแกน
    
    z_hit: 0.5
    # ความเป็นไปได้ของการตรงกันของชนิดของเลเซอร์สแกน (likelihood) เมื่อหุ่นยนต์เข้าใกล้กับอุปสรรค

    z_max: 0.05
    # ความเป็นไปได้สูงสุดของการพบอุปสรรคจากเลเซอร์สแกน
    
    z_rand: 0.5
    # ความเป็นไปได้ของการสุ่มพิกัดจากแผนที่

    z_short: 0.05
    # ความเป็นไปได้ของการตัดเลเซอร์สแกนในระยะสั้น
    
    scan_topic: scan
    #  scan_topic ที่เป็นชื่อ topic สำหรับรับข้อมูลเลเซอร์

bt_navigator: #  parameters ของ ROS สำหรับ node ที่ชื่อ bt_navigator ซึ่งเป็นชื่อย่อของ behavior tree navigator ซึ่งใช้สำหรับการวางแผนเส้นทางและการเคลื่อนที่ของหุ่นยนต์ในสภาวะอัตโนมัติ
  ros__parameters: # parameters ของ ROS
    
    use_sim_time: False 
    # กำหนดให้ใช้เวลาจำลองหรือไม่ (True หรือ False) "ซึ่งก็คือ False" 

    global_frame: map
    # กำหนด frame ของ global map ที่จะใช้ในการวางแผนเส้นทาง

    robot_base_frame: base_link
    # คือชื่อของ frame ที่ใช้เป็น reference frame สำหรับหุ่นยนต์ ในที่นี้คือ base_link ซึ่งเป็น frame ที่ติดตั้งบนโครงสร้างของหุ่นยนต์และใช้เป็นพื้นฐานในการคำนวณตำแหน่งและทิศทางของหุ่นยนต์ใน ROS

    odom_topic: /odom
    # topic odom 

    transform_tolerance: 0.1
    # ค่า tolerance ในการ transform ระหว่าง coordinate frames ต่างๆ

    bt_loop_duration: 10
    # ระยะเวลาที่จะรอรับคำสั่งเพื่อทำการวางแผนเส้นทางและเคลื่อนที่ใหม่ (หน่วยเป็นวินาที)
    
    default_server_timeout: 10
    # ระยะเวลาสูงสุดที่ใช้สำหรับการเชื่อมต่อกับ server (หน่วยเป็นวินาที)

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    # Nav2 BT Navigator จะมีการใช้ BT XML (Behavior Tree XML) เป็นไฟล์ที่ใช้ในการเขียนแผนการทำงานของหุ่นยนต์ 
    # และสามารถกำหนดได้ว่าให้ Nav2 BT Navigator ใช้ไฟล์ BT XML ใด ๆ สำหรับการนำทางไปยังตำแหน่งหรือลำดับของตำแหน่งหลาย ๆ ตำแหน่ง 
    # การกำหนดค่านี้สามารถทำได้ผ่านการตั้งค่าในไฟล์ launch หรือผ่านการแก้ไขไฟล์ YAML ที่เกี่ยวข้อง ดังนั้นการกำหนดไฟล์ BT XML 
    # ที่ใช้ในการนำทางเป็นเรื่องสำคัญในการใช้งาน Nav2 BT Navigator


    plugin_lib_names: #  เป็นการกำหนดชื่อของไลบรารีที่ใช้งานในโมดูล Behavior Tree ของ Nav2 
                      #  แต่ละไลบรารีก็จะมีหน้าที่ทำงานต่างๆ ตามชื่อของไลบรารีนั้นๆ และจะถูกเรียกใช้ในแต่ละสถานการณ์ของการนำทาง(Nav2)ตามเงื่อนไขที่ต้องการ. 
    - nav2_compute_path_to_pose_action_bt_node
    # จะเป็นไลบรารีที่ใช้ในการคำนวณเส้นทางเพื่อเคลื่อนที่ไปยังจุดหนึ่ง (pose) ที่กำหนด 
    - nav2_compute_path_through_poses_action_bt_node
    # เป็นโหนดที่ใช้สร้างเส้นทางการเดินทางจากจุดเริ่มต้นไปยังจุดหมายที่กำหนด โดยมีคำสั่งและเงื่อนไขที่จะทำให้หยุดการเดินทางเมื่อเกิดข้อผิดพลาดหรือไม่สามารถเดินทางไปยังจุดหมายได้
    - nav2_smooth_path_action_bt_node
    # เป็นโหนดที่ใช้สำหรับจัดการกับเส้นทางการเดินทางที่ถูกสร้างขึ้น โดยจะเรียกใช้ฟังก์ชันสำหรับการลบสิ่งกีดขวางในเส้นทางและทำให้เส้นทางเรียบขึ้นเพื่อให้เป็นไปตามความต้องการของผู้ใช้งาน
    - nav2_follow_path_action_bt_node
    # เป็นโหนดที่จะเรียกใช้ฟังก์ชันสำหรับควบคุมการเคลื่อนที่ของหุ่นยนต์โดยการติดตามเส้นทางการเดินทางที่ถูกสร้างขึ้น โดยมีการตรวจสอบเงื่อนไขเพื่อหยุดการเดินทางเมื่อเส้นทางถูกตัดขาดหรือถูกบังโดยสิ่งกีดขวางในทางเดินทาง
    - nav2_spin_action_bt_node
    # เป็นโหนดที่ใช้ในการหมุนทิศทางของหุ่นยนต์ไปยังทิศทางที่กำหนดให้ โดยระบบจะรอให้หุ่นยนต์หมุนจนกว่าจะเต็มที่ตามทิศทางที่กำหนด จากนั้นจึงส่งผลลัพธ์ว่าหมุนเสร็จแล้ว
    - nav2_wait_action_bt_node
    # เป็นโหนดที่ใช้ในการหยุดการทำงานของระบบไว้เพื่อรอเงื่อนไขที่กำหนดเป็นเวลาหนึ่งระยะเวลา จากนั้นจึงส่งผลลัพธ์กลับไป
    - nav2_assisted_teleop_action_bt_node
    # เป็นโหนดที่ใช้ในการควบคุมการเคลื่อนที่ของหุ่นยนต์แบบก้าวกระโดด โดยจะมีการระบุสิ่งที่ต้องการกระโดดไปยังนั้น โดยเรียกใช้งานโดยส่วนติดต่อของผู้ใช้ จึงจะส่งคำสั่งให้ระบบทำงานตามทิศทางที่กำหนดและส่งผลลัพธ์กลับไปให้ผู้ใช้งาน  
    - nav2_back_up_action_bt_node
    # เป็นโหนดที่ใช้ในการสั่งให้หุ่นยนต์ถอยหลังจากที่เกิดสิ่งกีดขวางขึ้นเพื่อให้หุ่นยนต์สามารถเคลื่อนที่ไปข้างหน้าได้
    - nav2_drive_on_heading_bt_node
    # เป็นโหนดที่ใช้ในการสั่งให้หุ่นยนต์เคลื่อนที่ตามทิศทางที่กำหนดในระหว่างเดินทาง
    - nav2_clear_costmap_service_bt_node
    # เป็นโหนดที่ใช้ในการเรียกใช้งานบริการเคลียร์ค่า costmap ซึ่งจะเป็นการลบข้อมูลใน costmap เพื่อให้หุ่นยนต์สามารถสร้างเส้นทางใหม่ได้ถูกต้อง โดยบริการนี้จะถูกเรียกใช้เมื่อ costmap เกิดความผิดพลาดหรือค่าใน costmap ไม่ถูกต้องตามที่ควรจะเป็น และต้องการลบข้อมูลเพื่อให้สามารถสร้างเส้นทางใหม่ได้
    - nav2_is_stuck_condition_bt_node
    # คือโหนดใน behavior tree ที่เช็คว่าหุ่นยนต์ติดขัดหรือไม่โดยจะตรวจสอบความเคลื่อนไหวของหุ่นยนต์ว่าเคลื่อนไหวหรือไม่หรือเคลื่อนไหวต่อเนื่องอยู่หรือไม่ โหนดนี้สามารถใช้ในการเลือกแผนการเคลื่อนที่ที่เหมาะสมกับสถานการณ์ได้ เช่น ถ้าหุ่นยนต์ติดขัดก็จะทำการรีเซ็ตแผนการเคลื่อนที่
    - nav2_goal_reached_condition_bt_node
    # คือโหนดใน behavior tree ที่เช็คว่าหุ่นยนต์ได้เดินทางมาถึงจุดหมายหรือไม่ โดยการตรวจสอบความห่างระหว่างตำแหน่งปัจจุบันของหุ่นยนต์กับตำแหน่งของจุดหมายว่ามีค่าน้อยกว่าค่าที่กำหนดหรือไม่ ถ้าค่าน้อยกว่าก็จะ return true และบอกว่าหุ่นยนต์เดินทางมาถึงจุดหมายแล้ว
    - nav2_goal_updated_condition_bt_node
    # คือโหนดใน behavior tree ที่เช็คว่ามีการอัพเดตจุดหมายหรือไม่ ถ้ามีการอัพเดตจุดหมายก็จะ return true และบอกว่าจุดหมายถูกอัพเดตแล้ว โดยโหนดนี้จะถูกใช้ในการตรวจสอบและอัพเดตแผนการเดินทางของหุ่นยนต์เมื่อมีการเปลี่ยนแปลงของจุดหมาย  
    - nav2_globally_updated_goal_condition_bt_node
    # เป็น condition node ที่ใช้ตรวจสอบว่ามีการอัปเดตเป้าหมาย (goal) ที่ถูกต้องไหม โดยใช้ข้อมูลเป้าหมายตามกรอบการอ้างอิงโลก (global frame) เช่น มีการเปลี่ยนแปลงของเป้าหมายในไฟล์เมื่อเป้าหมายถูกเรียกใช้โดยคำสั่งใหม่
    - nav2_is_path_valid_condition_bt_node
    # เป็น condition node ที่ใช้ตรวจสอบว่าเส้นทาง (path) ที่กำลังจะใช้งานเหมาะสมหรือไม่ โดยการตรวจสอบจะใช้เงื่อนไขต่างๆ เช่น ขนาดของพื้นผิวหรือความกว้างของโครงสร้างต่างๆ ในพื้นที่ที่ต้องผ่านทาง
    - nav2_initial_pose_received_condition_bt_node
    # เป็น condition node ที่ใช้ตรวจสอบว่าโหนด (node) ได้รับข้อมูลเริ่มต้นเรียบร้อยแล้วหรือไม่ เช่น โหนดจะรอการรับข้อมูลเริ่มต้นจากโหนดรับข้อมูลเริ่มต้นก่อนที่จะเริ่มทำงานการนำทางของโหนด
    - nav2_reinitialize_global_localization_service_bt_node
    # โหนดนี้เป็นโหนดที่เรียกใช้บริการ nav2_msgs/srv/ReinitializeGlobalLocalization เพื่อสั่งให้ระบบทำการกำหนดตำแหน่งและหมุนตัวอิงจากข้อมูลตำแหน่งที่ได้รับมาจาก tf และอื่น ๆ
    - nav2_rate_controller_bt_node
    # โหนดนี้เป็นโหนดควบคุมอัตราการเคลื่อนที่ โดยจะปรับความเร็วให้เป็นไปตามระยะทางที่ต้องการและอัตราการเปลี่ยนทิศทาง
    - nav2_distance_controller_bt_node
    # โหนดนี้เป็นโหนดควบคุมอัตราการเคลื่อนที่ ตามระยะทางที่ต้องการโดยตรง โดยไม่ใช้แผนที่หรือข้อมูลตำแหน่งอื่น ๆ
    - nav2_speed_controller_bt_node
    # คอนโทรลความเร็วในการเคลื่อนที่ โดยใช้ feedback loop ตรวจสอบความเร็วปัจจุบันและปรับตามความเหมาะสม เพื่อให้เคลื่อนที่อย่างเป็นไปตามเป้าหมาย 
    - nav2_truncate_path_action_bt_node
    # ใช้สำหรับตัดเส้นทางให้สั้นลง โดยสามารถกำหนดระยะห่างที่ต้องการตัดได้
    - nav2_truncate_path_local_action_bt_node
    # ใช้สำหรับตัดเส้นทางให้สั้นลงโดยใช้ข้อมูลระยะทางที่คำนวณได้จากเซ็นเซอร์ที่ติดตั้งบนโดรน
    - nav2_goal_updater_node_bt_node
    # ใช้สำหรับอัปเดตตำแหน่งเป้าหมายเมื่อมีการเปลี่ยนแปลงโดยภายนอก เช่น คำสั่งเปลี่ยนเส้นทาง หรือเปลี่ยนตำแหน่งเป้าหมายในระหว่างการทำงาน
    - nav2_recovery_node_bt_node
    # ใช้สำหรับการกู้คืนสถานการณ์พบปัญหา เช่น เกิดการชน หรือสึกหรือวัดไม่ได้ว่าตนอยู่ตำแหน่งไหน โดยใช้หลักการของ behavior tree ในการวิเคราะห์สภาพปัญหาและดำเนินการแก้ไข
    - nav2_pipeline_sequence_bt_node
    # เป็นโหนดที่จัดการลำดับการทำงานของคำสั่ง โดยจะทำงานจนกว่าคำสั่งปัจจุบันจะสำเร็จ แล้วจึงเริ่มทำคำสั่งถัดไป โดยใช้ลำดับของโหนดย่อยในลักษณะของแบบตัวเลือกสถานะ
    - nav2_round_robin_node_bt_node
    # เป็นโหนดที่จัดการแบบรอบเดียวกัน โดยจะเริ่มต้นด้วยโหนดย่อยแรก แล้วเข้าไปทำงานในแต่ละโหนดย่อยตามลำดับ จนกระทั่งกลับมาทำงานในโหนดย่อยแรกอีกครั้ง โดยจะวนรอบแบบนี้ไปเรื่อยๆ
    - nav2_transform_available_condition_bt_node
    # เป็นเงื่อนไขที่ตรวจสอบว่ามีการแปลงแปลงพิกัดจากเฟรมระบบที่ต่างกัน โดยใช้ข้อมูลจาก topic ที่ออกมาจากการติดตามเฟรมไปยังฟังก์ชันซอร์สโค้ด TF2
    - nav2_time_expired_condition_bt_node
    # เป็นเงื่อนไขที่ตรวจสอบว่าเวลาที่กำหนดไว้ได้หมดเวลาหรือไม่ โดยกำหนดเวลาหมดอายุให้กับเงื่อนไขนี้เอง
    - nav2_path_expiring_timer_condition
    # เป็นเงื่อนไขที่ตรวจสอบว่าเส้นทางในการเดินทางไปยังจุดหมายได้หมดเวลาหรือไม่ โดยใช้ข้อมูลเวลาที่กำหนดให้มีอายุกับเส้นทางเดินทางนี้เอง
    - nav2_distance_traveled_condition_bt_node
    # สร้างเงื่อนไขว่าห่างจากจุดเริ่มต้นไปเท่าไหร่แล้ว ถ้าห่างมากกว่าที่กำหนด ก็จะให้ผ่าน
    - nav2_single_trigger_bt_node
    # สร้างการเรียกใช้เหตุการณ์ที่เกิดขึ้นครั้งเดียว ใช้เพื่อเปิด/ปิดการทำงานของบอท
    - nav2_goal_updated_controller_bt_node
    # ใช้สำหรับส่งข้อมูลเป้าหมายใหม่จาก Path Planning ไปยัง Local Planner ซึ่งจะไปควบคุมเคลื่อนที่
    - nav2_is_battery_low_condition_bt_node
    # สร้างเงื่อนไขว่าระดับแบตเตอรี่ต่ำกว่าที่กำหนดหรือไม่ ถ้าต่ำกว่าก็จะให้ผ่าน
    - nav2_navigate_through_poses_action_bt_node
    # ใช้สำหรับเคลื่อนที่ไปยังเป้าหมายต่าง ๆ ตามลำดับ
    - nav2_navigate_to_pose_action_bt_node
    # ใช้สำหรับเคลื่อนที่ไปยังเป้าหมายที่กำหนด
    - nav2_remove_passed_goals_action_bt_node
    # ใช้สำหรับลบเป้าหมายที่ผ่านไปแล้วในคิวเพื่อลดการคำนวณที่ไม่จำเป็นใน Path Planning
    - nav2_planner_selector_bt_node
    # เป็นโหนดที่เลือกแผนการเดินทางที่เหมาะสมในการเดินทางของหุ่นยนต์ โดยใช้ตัวเลือกจากการตั้งค่าเพื่อเลือกว่าจะใช้แผนกำหนดเส้นทางใดในการเดินทาง เช่น Global Planner, Dynamic Planner, Recovery Planner หรือเป็นการรวมพวกทั้งหมดเข้าด้วยกัน
    - nav2_controller_selector_bt_node
    # เป็นโหนดที่เลือกคอนโทรลเลอร์ที่เหมาะสมสำหรับการเดินทาง โดยใช้ตัวเลือกจากการตั้งค่าเพื่อเลือกว่าจะใช้คอนโทรลเลอร์ใดในการควบคุมการเคลื่อนที่ของหุ่นยนต์ เช่น DWB (Differential Drive Control), TEB (Timed Elastic Band), Twist Controller หรือเป็นการรวมพวกทั้งหมดเข้าด้วยกัน
    - nav2_goal_checker_selector_bt_node
    # เป็นโหนดที่เลือก Goal Checker เพื่อตรวจสอบว่าหุ่นยนต์ได้ถึงเป้าหมายหรือยัง โดยใช้ตัวเลือกจากการตั้งค่าเพื่อเลือกว่าจะใช้ Goal Checker ใดในการตรวจสอบ เช่น Simple Goal Checker, Distance Based Goal Checker, Path Based Goal Checker หรือเป็นการรวมพวกทั้งหมดเข้าด้วยกัน
    - nav2_controller_cancel_bt_node
    # เป็นโหนดที่ยกเลิกการทำงานของคอนโทรลเลอร์ โดยใช้ข้อความ cancel และส่งไปยังหน่วยควบคุมการเดินทางเพื่อจะหยุดหุ่นยนต์หรือแก้ไขการเคลื่อนที่ 
    - nav2_path_longer_on_approach_bt_node
    # เป็นเงื่อนไขที่ตรวจสอบว่าเส้นทางใหม่ที่คำนวณขึ้นมานั้นยาวกว่าเส้นทางเดิมที่อยู่ในเหตุการณ์การเคลื่อนที่ก่อนหน้านี้หรือไม่ โดยจะต้องกำหนดค่า threshold ว่าควรมีค่าเท่าใดเมื่อเปรียบเทียบระยะห่างระหว่างเส้นทางเดิมและเส้นทางใหม่
    - nav2_wait_cancel_bt_node
    # เป็นโหนดที่รอเวลาหนึ่งช่วงเพื่อตรวจสอบว่ามีการยกเลิกหรือไม่ โดยการยกเลิกนั้นอาจเกิดจากการหยุดฉับไวหรือหยุดฉับพลันของหุ่นยนต์
    - nav2_spin_cancel_bt_node
    # เป็นโหนดที่ทำหน้าที่ในการหยุดการหมุนของหุ่นยนต์และตรวจสอบว่ามีการยกเลิกหรือไม่
    - nav2_back_up_cancel_bt_node
    # เป็นโหนดที่ทำหน้าที่ในการหยุดการถอยของหุ่นยนต์และตรวจสอบว่ามีการยกเลิกหรือไม่
    - nav2_assisted_teleop_cancel_bt_node
    # เป็นโหนดที่ทำหน้าที่ในการหยุดการควบคุมด้วยวิธีช่วยเหลือและตรวจสอบว่ามีการยกเลิกหรือไม่
    - nav2_drive_on_heading_cancel_bt_node
    # เป็นโหนดที่ทำหน้าที่ในการหยุดการขับไปในทิศทางที่กำหนดและตรวจสอบว่ามีการยกเลิกหรือไม่

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False 

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False
# กำหนดค่า ROS ของโหนด bt_navigator_navigate_through_poses_rclcpp_node และ bt_navigator_navigate_to_pose_rclcpp_node ซึ่งเป็นโหนดในระบบ ROS 
# ที่ใช้สำหรับการนำทางของหุ่นยนต์ โดย use_sim_time คือตัวแปรที่ใช้กำหนดว่าจะใช้เวลาจำลอง (simulated time) หรือเวลาจริง (real time) ในการทำงานของระบบ ROS 
# ในที่นี้ถูกกำหนดให้ใช้เวลาจริง (False) ซึ่งหมายความว่าโหนดนี้จะใช้เวลาจริงจากระบบเครื่องมือที่ใช้ควบคุมหุ่นยนต์ ไม่ได้ใช้เวลาจำลองจากโปรแกรมจำลองการทำงานของหุ่นยนต์ เช่น Gazebo หรือ ROS 2 ตัวอื่น ๆ ที่ใช้เวลาจำลอง.

controller_server: # การกำหนดพารามิเตอร์ใน controller_server ใช้สำหรับกำหนดการทำงานของ nav2_controller ซึ่งเป็นส่วนหนึ่งของ Navigation Stack ใน ROS 2 
  ros__parameters:
    use_sim_time: # False กำหนดให้ใช้เวลาจริง (False) ซึ่งหมายความว่าโหนดนี้จะใช้เวลาจริงจากระบบเครื่องมือที่ใช้ควบคุมหุ่นยนต์
    # odom_topic: /odom
    controller_frequency: 20.0 # คือความถี่ในการคำนวณสถานะการเคลื่อนที่ของหุ่นยนต์ โดยหน่วยเป็น Hz (Hertz)
    min_x_velocity_threshold: 0.001 # คือความเร็วขั้นต่ำในแนวแกน x ที่ต้องการให้หุ่นยนต์เคลื่อนที่ หากความเร็วน้อยกว่าค่านี้ จะถือว่าหุ่นยนต์ไม่เคลื่อนที่
    min_y_velocity_threshold: 0.5 #  คือความเร็วขั้นต่ำในแนวแกน y ที่ต้องการให้หุ่นยนต์เคลื่อนที่ หากความเร็วน้อยกว่าค่านี้ จะถือว่าหุ่นยนต์ไม่เคลื่อนที่
    min_theta_velocity_threshold: 0.001 # คือความเร็วขั้นต่ำในการหมุนที่ต้องการให้หุ่นยนต์ทำ หากความเร็วน้อยกว่าค่านี้ จะถือว่าหุ่นยนต์ไม่หมุน
    failure_tolerance: 0.3 # คือระยะห่างขั้นต่ำระหว่างตำแหน่งปัจจุบันของหุ่นยนต์กับเป้าหมาย (goal position) เมื่อหุ่นยนต์เคลื่อนที่ไปยังเป้าหมายแต่ไม่สามารถเคลื่อนที่ได้ตามเป้าหมาย จะถือว่าเกิดการล้มเหลวในการเคลื่อนที่
    progress_checker_plugin: "progress_checker" # คือชื่อของ plugin ที่ใช้สำหรับตรวจสอบความคืบหน้าในการเคลื่อนที่ของหุ่นยนต์ ในที่นี้ใช้ progress_checker plugin
    goal_checker_plugins: ["general_goal_checker"] # เป็น parameter ที่กำหนดว่าใช้ plugins ไหนในการตรวจสอบว่าหุ่นยนต์เคลื่อนที่ไปที่จุดหมายได้หรือไม่ โดยในตัวอย่างนี้กำหนดให้ใช้ "general_goal_checker" plugin เพื่อตรวจสอบว่าหุ่นยนต์ได้เดินทางไปยังจุดหมายอย่างถูกต้องหรือไม่
    controller_plugins: ["FollowPath"] # เป็น parameter ที่กำหนดว่าใช้ plugins ไหนในการควบคุมการเคลื่อนที่ของหุ่นยนต์ ในตัวอย่างนี้กำหนดให้ใช้ "FollowPath" plugin เพื่อควบคุมการเคลื่อนที่ของหุ่นยนต์ในการเดินทางตามเส้นทางที่กำหนดไว้ โดยจะใช้ข้อมูลพิกัดที่ได้รับจากตัวชี้วัดเพื่อคำนวณเส้นทางการเดินทางที่เหมาะสมในการเคลื่อนที่ไปยังจุดหมาย และส่งคำสั่งเคลื่อนที่ตามเส้นทางดังกล่าวให้กับหุ่นยนต์

    # Progress checker parameters
    progress_checker: 
      plugin: "nav2_controller::SimpleProgressChecker"
      #เป็นการกำหนดการตรวจสอบความคืบหน้าของการเคลื่อนที่ของหุ่นยนต์ โดยกำหนด plugin ของ progress checker เป็น nav2_controller::SimpleProgressChecker เป็น progress checker แบบง่าย ๆ ที่จะตรวจสอบว่าหุ่นยนต์ได้เคลื่อนที่ไปในรัศมีที่กำหนด 
      required_movement_radius: 0.5 # เวลาที่ใช้เคลื่อนที่เกินกว่าที่กำหนดไว้ 
      movement_time_allowance: 10.0 # ตรวจสอบพบว่าหุ่นยนต์ยังไม่เคลื่อนที่ตามเงื่อนไขที่กำหนด จะถือว่าหุ่นยนต์ไม่คืบหน้า และจะทำการแจ้งเตือนผู้ใช้หรือพบข้อผิดพลาด (fail the goal)
      # Goal checker parameters
      #precise_goal_checker:
      #  plugin: "nav2_controller::SimpleGoalChecker"
      #  xy_goal_tolerance: 0.25
      #  yaw_goal_tolerance: 0.25
      #  stateful: True
    general_goal_checker: # เป็นตัวเช็คว่าหุ่นยนต์ได้เดินทางไปยังจุดหมายแล้วหรือไม่ โดยใช้ nav2_controller::SimpleGoalChecker 
      stateful: True # กำหนดค่า tolerance สำหรับระยะทางและการหมุนของหุ่นยนต์โดยเฉพาะเพื่อให้หุ่นยนต์มีการเดินทางไปยังจุดหมายที่ถูกต้อง
      plugin: "nav2_controller::SimpleGoalChecker" # ใช้ในการตรวจสอบว่าหุ่นยนต์อยู่ใกล้จุดหมายแล้วหรือไม่ ด้วยการเช็คระยะห่างในแนวแกน x และ y ตลอดจนการเช็คการหมุนของหุ่นยนต์เป็นองศา 
      
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      # xy_goal_tolerance และ yaw_goal_tolerance เป็นพารามิเตอร์ของโหนด general_goal_checker ใน controller_server ซึ่งเป็นโหนดที่ใช้ตรวจสอบว่าหุ่นยนต์ได้เดินทางไปยังจุดปลายทางได้สำเร็จหรือไม่ โดย xy_goal_tolerance ระบุรัศมีของวงกลมที่เกินจุดปลายทางได้ในแกน X และ Y ในระบบพิกัดท้องถิ่น ส่วน yaw_goal_tolerance ระบุค่า tolerance สำหรับการหมุนของหุ่นยนต์เมื่อมันเดินทางไปยังจุดปลายทางแล้ว ในหน่วยเป็น radians 
      # ดยพารามิเตอร์ทั้งสองนี้จะต้องถูกปรับให้เหมาะสมกับขนาดและลักษณะของหุ่นยนต์ และสภาพแวดล้อมการใช้งาน


    # DWB parameters  DWB (Dynamical Window Approach) 
    FollowPath: # โมดูลที่จัดการกับการวางแผนการเคลื่อนที่ของหุ่นยนต์โดยพิจารณาข้อมูลเซ็นเซอร์และสถานการณ์ปัจจุบันของหุ่นยนต์ โดยจะคำนึงถึงความเร็วที่เหมาะสมในการเคลื่อนที่ตามเส้นทางที่ต้องการ โดยสามารถกำหนดพารามิเตอร์ต่างๆ เพื่อปรับการเคลื่อนที่ของหุ่นยนต์ได้
      
      plugin: "dwb_core::DWBLocalPlanner"
      
      #การกำหนด plugin ที่จะใช้ในการทำ local planning ของระบบ navigation ภายใน ROS 2 โดยในที่นี้ใช้ DWB (Differential Drive Dynamic Window Approach) Local Planner เป็น plugin ที่กำหนดในการคำนวณการวางแผนที่จะเคลื่อนที่ของหุ่นยนต์ในสภาวะที่ต้องเคลื่อนที่ใน environment ที่มีอุปสรรค โดยสามารถปรับแต่งพารามิเตอร์ต่างๆ เช่น ความเร็วสูงสุด ระยะเวลาของการวางแผน และอื่นๆ ได้ตามความต้องการของผู้ใช้งาน.
      
      debug_trajectory_details: True # กำหนดให้แสดงข้อมูลเพิ่มเติมเกี่ยวกับการวางแผนเส้นทางแบบดีบักของ DWB เมื่อสร้างขึ้น
      
      min_vel_x: 0.0 # กำหนดความเร็วขั้นต่ำในแนวแกน X ของหุ่นยนต์
      
      min_vel_y: 0.0 # กำหนดความเร็วขั้นต่ำในแนวแกน Y ของหุ่นยนต์
      
      max_vel_x: 0.26 # กำหนดความเร็วสูงสุดในแนวแกน X ของหุ่นยนต์
      
      max_vel_y: 0.0 # กำหนดความเร็วสูงสุดในแนวแกน Y ของหุ่นยนต์
      
      max_vel_theta: 0.12 # กำหนดความเร็วสูงสุดในการเลี้ยว (หมุน) ของหุ่นยนต์ ในหน่วย rad/s
      
      min_speed_xy: 0.0 # กำหนดความเร็วขั้นต่ำในแนว XY ของหุ่นยนต์ ในหน่วย m/s
      
      max_speed_xy: 0.26 # กำหนดความเร็วสูงสุดในแนว XY ของหุ่นยนต์ ในหน่วย m/s
      
      min_speed_theta: 0.0 # กำหนดความเร็วขั้นต่ำในการเลี้ยว (หมุน) ของหุ่นยนต์ ในหน่วย rad/s
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      
      acc_lim_x: 2.5 # กำหนดความเร่งสูงสุดในแนว x (แนวหน้า) ของหุ่นยนต์     
      
      acc_lim_y: 0.0 # กำหนดความเร่งสูงสุดในแนว y (แนวข้าง) ของหุ่นยนต์
      
      acc_lim_theta: 3.2 # กำหนดความเร่งสูงสุดในแนว z (แนวหมุน) ของหุ่นยนต์
      
      decel_lim_x: -2.5 #  กำหนดการเบรกสูงสุดในแนว x ของหุ่นยนต์
      
      decel_lim_y: 0.0 # กำหนดการเบรกสูงสุดในแนว y ของหุ่นยนต์
      
      decel_lim_theta: -3.2 # กำหนดการเบรกสูงสุดในแนว z ของหุ่นยนต์

      
      vx_samples: 20 
      
      vy_samples: 5 
      
      vtheta_samples: 20 
      # พารามิเตอร์ vx_samples และ vy_samples เป็นจำนวนตัวอย่างที่จะถูกสร้างขึ้นโดยแผนภาพเพื่อประมวลผลในขั้นตอนวางแผนพื้นที่ท้องถิ่น 
      # จำนวนตัวอย่างเหล่านี้จะส่งผลต่อการประมวลผลแผนที่ท้องถิ่นและความแม่นยำของการวางแผนของหุ่นยนต์ จำนวนตัวอย่างสูงสุดสามารถกำหนดได้ในการกำหนดพารามิเตอร์เหล่านี้
    
      
      sim_time: 1.7 
      
      # ระยะเวลาสำหรับการคำนวณความเร็วและทิศทางของหุ่นยนต์เมื่อเลื่อนเวลาไปข้างหน้า โดยจะถูกนำมาใช้กับค่าความเร็วที่จะถูกคำนวณขึ้นอยู่กับระยะเวลานี้
      
      linear_granularity: 0.05 
      
      # ค่าความคลาดเคลื่อนที่ยอมรับได้ในแกน X และ Y เมื่อหุ่นยนต์เดินทางไปสู่จุดหมาย
      
      angular_granularity: 0.025
      
      # ความเร็วสูงสุดที่ใช้สำหรับการหยุดของหุ่นยนต์
      
      transform_tolerance: 1.2
      
      # ค่าเวลาสูงสุดที่ใช้สำหรับการรอรับข้อมูลการเปลี่ยนแปลงของหุ่นยนต์ในระหว่างเดินทางที่อยู่ในระยะห่างจากจุดหมายเป้าของหุ่นยนต์
      
      xy_goal_tolerance: 0.25
      
      # รัศมีระยะทางที่ยอมรับได้ในการเข้าสู่จุดหมายแบบวงกลมของตำแหน่งแนวระดับนอกโลก (global frame) ซึ่งหมายความว่าเมื่อหุ่นยนต์เข้าใกล้จุดหมายอย่างใกล้ชิดมากขึ้น หุ่นยนต์จะยอมรับการเข้าสู่จุดหมายนั้นๆ   
      
      trans_stopped_velocity: 0.25
      # เป็นค่าความเร็วเชิงเส้นของหุ่นยนต์ที่ถือว่าหยุดได้ โดยที่ระบบจะพิจารณาหยุดเมื่อความเร็วของหุ่นยนต์ต่ำกว่าค่า trans_stopped_velocity 
      # ดังนั้นค่านี้มีความสำคัญเมื่อเราต้องการกำหนดการหยุดของหุ่นยนต์ เช่น เมื่อหุ่นยนต์ไปถึงจุดหมายแล้ว หรือเมื่อเกิดสิ่งกีดขวางขณะที่หุ่นยนต์กำลังเคลื่อนที่ 
      # การตั้งค่า trans_stopped_velocity เป็นเรื่องสำคัญในการให้ระบบวางแผนการเดินทางและควบคุมการเคลื่อนที่ของหุ่นยนต์เพื่อให้การเดินทางเป็นไปได้สะดวก
      # และเป็นระบบ ค่าที่ใช้ควรจะเหมาะสมกับความเร็วสูงสุดของหุ่นยนต์และสภาพแวดล้อมที่หุ่นยนต์จะเคลื่อนที่ในนั้น ยิ่งค่า trans_stopped_velocity 
      # สูงจะทำให้ระบบเกิดการหยุดที่แม่นยำมากขึ้น แต่อาจทำให้หุ่นยนต์หยุดช้าลง หรือเกิดการเลียนแบบวิ่งผ่านจุดหมายได้มากขึ้น
      
      short_circuit_trajectory_evaluation: True
      
      # คือการตั้งค่าให้กำหนดว่าหากพบว่ามีแผนการเดินทางไหนสามารถดำเนินการได้เร็วกว่าแผนการอื่น ๆ ก็ให้หยุดค้นหาแผนการอื่นและเลือกใช้แผนการนั้น โดยที่ไม่ต้องพิจารณาแผนการอื่น ๆ ที่เหลืออีกต่อไป
      
      stateful: True
      
      # คือการเก็บ state หรือสถานะของการทำงานไว้ใน local planner เพื่อทำให้มีความยืดหยุ่นสูงขึ้นในการวางแผนเส้นทางในการเดินทางของหุ่นยนต์ โดยการเก็บ state 
      
      
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      
      # ชื่อของปัญหาที่ใช้ในการคำนวณหลัก ๆ ประกอบไปด้วยหลายปัญหา เช่น RotateToGoal ซึ่งใช้ในการหมุนเพื่อให้หุ่นยนต์เหนืออุปสรรคที่อยู่ตรงกลางของเส้นทาง Oscillation ใช้เพื่อจำกัดการสั่งควบคุมที่กำลังสั่น โดยการคืนค่าพารามิเตอร์ดังกล่าวจะช่วยให้สามารถปรับค่าควบคุมได้เพื่อเพิ่มประสิทธิภาพการเคลื่อนที่
      
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      
      # BaseObstacle.scale และ PathAlign.scale คือ ค่าสัมประสิทธิ์ที่ใช้ในการปรับตัวของพารามิเตอร์ ปัญหา BaseObstacle ใช้ในการคำนวณการหลบหลีกอุปสรรค ส่วน PathAlign ใช้ในการช่วยให้หุ่นยนต์วางตำแหน่งให้ถูกต้องตามเส้นทาง
      
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      
      # PathAlign.forward_point_distance และ GoalAlign.forward_point_distance คือ ระยะห่างจากจุดปัจจุบันของหุ่นยนต์ไปยังจุดที่ต้องการจะวางตำแหน่ง เพื่อให้หุ่นยนต์มีการวางตำแหน่งได้แม่นยำขึ้น
      
      
      GoalAlign.forward_point_distance: 0.1
      
      # ระยะห่างจากจุดปัจจุบันไปยังจุดปลายทางที่ต้องการเลื่อนหน้าหลังจากหุ่นยนต์วิ่งไปตามเส้นทาง
      
      PathDist.scale: 32.0
      
      # สเกลต์ของระยะทางจากจุดปัจจุบันไปยังจุดที่ต้องการในการวางแผนเส้นทาง
      
      GoalDist.scale: 24.0
      
      # สเกลต์ของระยะทางจากจุดปัจจุบันไปยังจุดปลายทาง
      
      RotateToGoal.scale: 32.0
      
      # สเกลต์ของมุมที่ต้องหมุนเพื่อหันหน้าหาจุดปลายทาง
      
      RotateToGoal.slowing_factor: 5.0
      
      # ความเร็วของการหมุนลดลงเมื่อหุ่นยนต์เข้าใกล้จุดปลายทาง
      
      RotateToGoal.lookahead_time: -1.0
      
      # เวลาที่ใช้ในการคาดการณ์ตำแหน่งของจุดปลายทาง

local_costmap:
  local_costmap:
    ros__parameters: กำหนดค่าพารามิเตอร์ของ local costmap ใน ROS
      update_frequency: 10.0 # ความถี่ในการอัปเดตของ costmap ในหน่วย Hz
      publish_frequency: 10.0 # ความถี่ในการส่งข้อมูล costmap ไปยัง topic ของ ROS ในหน่วย Hz
      global_frame: odom #ระบุชื่อของ reference frame สำหรับ costmap โดยทั่วไปจะใช้ชื่อ frame ของ map หรือ odom
      robot_base_frame: base_link # ระบุชื่อของ reference frame สำหรับ base frame ของหุ่นยนต์
      use_sim_time: False # กำหนดให้ใช้เวลาจำลอง (True) หรือเวลาจริง (False) ในการรันโปรแกรม
      rolling_window: true #  กำหนดว่า costmap จะมีการเคลื่อนไหวไปข้างหน้าไหม โดยถ้าเป็น true จะแสดงผลเป็นเหมือนหน้าต่างสไลด์
      width: 3 # กำหนดความกว้างของ costmap ในหน่วยเมตร
      height: 3 # กำหนดความสูงของ costmap ในหน่วยเมตร
      resolution: 0.05 # กำหนดความละเอียดของ costmap ในหน่วยเมตรต่อพิกเซล
      # robot_radius: 0.22
      footprint: "[[-0.3,-0.275], [0.3,-0.275], [0.3,0.275], [-0.3,0.275]]"
      # คือการกำหนดขนาดและทรงของหุ่นยนต์ในแต่ละช่วงเวลา เพื่อให้ costmap คำนวณความเหมาะสมของพื้นที่สำหรับหุ่นยนต์ในการเคลื่อนที่
      plugins: ["voxel_layer", "inflation_layer"]
      # เป็นการกำหนด plugin ที่ใช้งานกับ costmap เช่น voxel_layer และ inflation_layer
      inflation_layer: # เป็น plugin ที่ใช้ในการขยายพื้นที่ความปลอดภัยของ costmap เพื่อป้องกันการชนกับสิ่งของที่อยู่ใกล้เคียง
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0 # คือตัวแปรที่ใช้กำหนดค่าความสำคัญของการขยายพื้นที่ความปลอดภัย โดยเรียงลำดับตั้งแต่ 0 ถึง 1 ซึ่งค่าที่สูงกว่าหมายถึงพื้นที่ความเป็นไปได้ที่น้อยลง และมีโอกาสชนกับสิ่งของสูงขึ้น
        inflation_radius: 0.35 # คือรัศมีที่ใช้ในการขยายพื้นที่ความปลอดภัยของ costmap เพื่อป้องกันการชนกับสิ่งของที่อยู่ใกล้เคียง
      voxel_layer: # โดยองค์ประกอบสำคัญของ VoxelLayer คือการแปลงข้อมูลจากเซ็นเซอร์สแกน (scan) ในรูปของชุดข้อมูลจุด 3 มิติ ให้อยู่ในรูปของ voxel map ที่เป็นกริดข้อมูลแบบ 3 มิติ ซึ่งสามารถนำไปใช้ในการวางแผนเส้นทางหรือวางแผนการเคลื่อนที่ในสภาวะสึกหรอสิ่งกีดขวางได้
        plugin: "nav2_costmap_2d::VoxelLayer"
        #ระบุชื่อ plugin ที่จะใช้สำหรับ VoxelLayer ซึ่งในที่นี้เป็น nav2_costmap_2d::VoxelLayer ซึ่งเป็นชุดคำสั่งสำหรับการสร้างแผนที่ costmap ที่ใช้ใน ROS 2
        enabled: True
        #ระบุว่าให้เปิดใช้งาน VoxelLayer
        publish_voxel_map: True 
        #ระบุว่าให้ VoxelLayer เผยแพร่แผนที่ voxel map ที่ได้ผลักษณะไว้เป็น topic ROS เพื่อให้โหนดอื่นๆ ใน ROS 2 สามารถเข้าถึงแผนที่นี้ได้
        origin_z: 0.0
        #ระบุความสูงของระนาบฐาน (base plane) ที่จะนำมาใช้เป็นศูนย์กลางของ voxel map และสามารถปรับค่าได้ตามความต้องการ
        z_resolution: 0.05 #  ความละเอียดในแกน z ของเซลล์กริดที่ใช้สำหรับสร้างแผนที่
        z_voxels: 16 # จำนวนเซลล์กริดในแกน z ที่ใช้สำหรับสร้างแผนที่
        max_obstacle_height: 2.0 # ความสูงสูงสุดของอุปสรรคที่จะถูกตรวจจับ
        mark_threshold: 0 # ค่าความเข้มของจุดของ LiDAR ที่จะถูกจัดลำดับเป็นอุปสรรค
        observation_sources: scan #ชื่อเซ็นเซอร์ที่ใช้สำหรับการจับอุปสรรค (ในที่นี้คือ LiDAR) คือรายชื่อของเซ็นเซอร์ที่ใช้สำหรับการจับอุปสรรคภายในสภาพแวดล้อม เช่น ในที่นี้ใช้ LiDAR ที่ชื่อ scan
        scan: # เป็นชื่อเซ็นเซอร์และระบุค่าต่างๆ ที่เกี่ยวข้องกับการใช้งาน LiDAR ในการตรวจจับอุปสรรค ได้แก่
          topic: /scan #ชื่อของ topic ที่ใช้รับข้อมูลจาก LiDAR
          max_obstacle_height: 2.0 # ความสูงสูงสุดของอุปสรรคที่สามารถตรวจจับได้
          clearing: True # บอกว่าควรลบค่าค่าใช้จ่ายเมื่อพบว่าพื้นที่นั้นไม่มีอุปสรรคแล้วหรือไม่
          marking: True # บอกว่าควรเพิ่มค่าค่าใช้จ่ายเมื่อพบว่ามีอุปสรรคในพื้นที่
          data_type: "LaserScan" # ชนิดของข้อมูลที่ได้รับจากเซ็นเซอร์ ในที่นี้คือ LaserScan
          raytrace_max_range: 3.0 # ระยะที่ใช้ในการจำลองเส้นตรงจากเซ็นเซอร์ (ในกรณีที่ไม่มีอุปสรรค) โดยมีหน่วยเป็นเมตร
          raytrace_min_range: 0.0 # ระยะเริ่มต้นของการจำลองเส้นตรงจากเซ็นเซอร์ (ในกรณีที่ไม่มีอุปสรรค) โดยมีหน่วยเป็นเมตร
          obstacle_max_range: 2.5 # ระยะสูงสุดที่สามารถตรวจจับได้โดยใช้ LiDAR โดยมีหน่วยเป็นเมตร
          obstacle_min_range: 0.0 # ระยะที่ใช้ตรวจจับอุปสรรคสุดต่ำสุด (หน่วยเป็นเมตร)
      static_layer: 
        plugin: "nav2_costmap_2d::StaticLayer" # ตัวจัดการเลเยอร์ของแผนที่ 2 มิติ ซึ่งในที่นี้ใช้เป็น nav2_costmap_2d::StaticLayer
        map_subscribe_transient_local: True # ใช้ sub ที่อยู่ในพื้นที่และจะยกเลิก sub เมื่อโหนดนี้ถูกสั่งให้หยุดทำงาน
      always_send_full_costmap: True # ส่ง costmap แบบเต็มเมื่อเปลี่ยนแปลงค่า การตั้งค่าค่านี้เป็น True จะส่ง costmap แบบเต็มแทนที่จะส่งเฉพาะส่วนที่เปลี่ยนแปลง เพื่อความแม่นยำในการตรวจจับอุปสรรค

global_costmap: # พารามิเตอร์ของ global costmap ซึ่งเป็นตัวกำหนดการวาดแผนที่ที่ใช้ในการนำทางโดยใช้ข้อมูลจากเซ็นเซอร์ที่ติดตั้งอยู่บนหุ่นยนต์ 
  global_costmap:
    ros__parameters:
      update_frequency: 1.0 # ความถี่ในการอัพเดท global costmap โดยหน่วงเวลาระหว่างการอัพเดทเป็น 1/ความถี่ เช่น update_frequency: 1.0 หมายถึงอัพเดททุกวินาที
      publish_frequency: 1.0 # ความถี่ในการเผยแพร่ global costmap ออกไปยังโหนดอื่นๆใน ROS โดยหน่วงเวลาระหว่างการเผยแพร่เป็น 1/ความถี่ เช่น publish_frequency: 1.0 หมายถึงเผยแพร่ทุกวินาที
      global_frame: map # ชื่อโดเมนเฟรม (frame) ของระบบอ้างอิงของ global costmap
      robot_base_frame: base_link # ชื่อโดเมนเฟรมของฐานหุ่นยนต์
      use_sim_time: False # ใช้เวลาจริงของเครื่องจริง
      # robot_radius: 0.22
      footprint: "[[-0.3,-0.275], [0.3,-0.275], [0.3,0.275], [-0.3,0.275]]"
      # เป็นการกำหนดรูปทรงของหุ่นยนต์ (robot) เพื่อใช้ในการคำนวณพื้นที่ที่หุ่นยนต์สามารถเคลื่อนที่ได้ โดยรูปทรงจะถูกกำหนดในรูปแบบของ coordinates ของจุดขอบเขตของรูปทรง ในตัวอย่างนี้มีค่าเป็น "[[-0.3,-0.275], [0.3,-0.275], [0.3,0.275], [-0.3,0.275]]" ซึ่งหมายความว่ามีจุดขอบเขตของรูปทรงดังนี้ (-0.3,-0.275), (0.3,-0.275), (0.3,0.275), (-0.3,0.275)
      resolution: 0.05
      # เป็นการกำหนดความละเอียดของแผนที่ (map) ที่ใช้ในการนำทาง ซึ่งมีหน่วยเป็นเมตรต่อพิกเซล (meters per pixel)
      track_unknown_space: true
      # เป็นการกำหนดว่าในกรณีที่มีพื้นที่ในแผนที่ที่ไม่เคยสร้างค่าความน่าจะเป็น (likelihood) มาก่อนจะต้องให้หุ่นยนต์นำทางยังพื้นที่นั้นหรือไม่
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      # static_layer: layer สำหรับกำหนดค่าคงที่ใน costmap เช่น ค่าความสูงของสิ่งกีดขวาง
      # obstacle_layer: layer สำหรับจัดการกับข้อมูลอุปสรรคที่มาจาก sensor ต่างๆ เช่น lidar, โดยใช้โมเดลการสร้างค่า cost จากการวัดระยะทางและความน่าจะเป็นของอุปสรรค
      # inflation_layer: layer สำหรับการขยายขนาดของพื้นที่ปลอดภัย โดยทำการเพิ่มค่า cost ของ cell ใกล้กับอุปสรรคเพื่อให้ robot วางแผนเส้นทางห่างจากอุปสรรค
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer" # plugin ที่ใช้สร้าง layer สำหรับ obstacle ใน costmap
        enabled: True # กำหนดให้ใช้ obstacle_layer หรือไม่ (True/False)
        observation_sources: scan # ชื่อ sensor source ที่ใช้สำหรับสร้าง obstacle layer ใน costmap (ในที่นี้คือ scan)
        scan:
          topic: /scan # กำหนดชื่อของ topic ที่ใช้ในการรับข้อมูลจากเซ็นเซอร์แสกนเลเซอร์
          max_obstacle_height: 2.0 # กำหนดความสูงสูงสุดของอุปสรรคที่จะถูกนับเป็นอุปสรรคในการสร้างแผนที่
          clearing: True # กำหนดว่าจะทำการลบอุปสรรคออกจากแผนที่หรือไม่ (True/False)
          marking: True # กำหนดว่าจะทำการเพิ่มอุปสรรคเข้าไปในแผนที่หรือไม่ (True/False)
          data_type: "LaserScan" # กำหนดประเภทของข้อมูล (ในที่นี้คือ LaserScan)
          raytrace_max_range: 3.0 # กำหนดระยะที่สูงสุดที่แสกนได้ (ในเมตร) ในการสร้างเส้นทาง
          raytrace_min_range: 0.0 # กำหนดระยะที่ต่ำสุดที่แสกนได้ (ในเมตร) ในการสร้างเส้นทาง
          obstacle_max_range: 2.5 # กำหนดระยะสูงสุดของอุปสรรคที่จะถูกนับเป็นอุปสรรคในการสร้างแผนที่
          obstacle_min_range: 0.0 # กำหนดระยะต่ำสุดของอุปสรรคที่จะถูกนับเป็นอุปสรรคในการสร้างแผนที่
      static_layer: # เป็น layer ที่ใช้ในการแสดงข้อมูลสภาพแวดล้อมแบบสถิติ เช่น ข้อมูลแผนที่ประจำที่หรืออุปกรณ์คงที่ 
        plugin: "nav2_costmap_2d::StaticLayer" # กำหนดให้ใช้ plugin nav2_costmap_2d::StaticLayer
        map_subscribe_transient_local: True # ที่ map_subscribe_transient_local: True จะทำการสมัครรับข้อมูลแผนที่แบบ transient local เพื่อให้รับข้อมูลแผนที่ใหม่ๆ ได้ทันทีเมื่อมีการอัพเดท
      inflation_layer: # เป็น layer ที่ใช้ในการขยายขอบเขตของสิ่งกีดขวาง
        plugin: "nav2_costmap_2d::InflationLayer" # กำหนดให้ใช้ plugin nav2_costmap_2d::InflationLayer
        cost_scaling_factor: 3.0 # ที่ cost_scaling_factor: 3.0 กำหนดค่าสำหรับปรับความสำคัญของสิ่งกีดขวาง
        inflation_radius: 0.35 # inflation_radius: 0.35 กำหนดรัศมีของการขยายขอบเขต
      always_send_full_costmap: True # เป็นการกำหนดว่า costmap จะถูกส่งเป็น full หรือเป็นส่วน ๆ เมื่อมีการอัพเดท โดยกำหนดให้เป็น True คือจะส่ง costmap ทั้งหมดเสมอ

## โดยทั้งสองโหนดนี้เป็นส่วนสำคัญของการสร้างแผนที่สำหรับหุ่นยนต์ ซึ่งสามารถโหลดแผนที่ที่ถูกสร้างมาแล้วหรือสร้างแผนที่ขึ้นใหม่ได้
map_server: # กำหนดพารามิเตอร์สำหรับโหนด map_server
  ros__parameters:
    use_sim_time: False # กำหนดให้ใช้เวลาจริง (False) ซึ่งหมายความว่าโหนดนี้จะใช้เวลาจริงจากระบบเครื่องมือที่ใช้ควบคุมหุ่นยนต์
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver: # กำหนดพารามิเตอร์สำหรับโหนด map_saver
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0 # save_map_timeout: กำหนดเวลาสูงสุดที่ใช้ในการบันทึกแผนที่
    free_thresh_default: 0.25 # กำหนดค่า threshold สำหรับบอกว่า cell ในแผนที่ว่างว่างเท่าไหร่
    occupied_thresh_default: 0.65 # กำหนดค่า threshold สำหรับบอกว่า cell ในแผนที่เต็มเต็มเท่าไหร่
    map_subscribe_transient_local: True # กำหนดให้โหนดติดตามการอัพเดตแผนที่ในเครื่องลูกข่ายของตัวเองและไม่สนใจการอัพเดตจากเครื่องลูกข่ายอื่น

planner_server: # กำหนดค่า ROS สำหรับ planner_server
# #planner_server เป็น ROS node ที่ใช้สำหรับคำนวณเส้นทางการเคลื่อนที่ของหุ่นยนต์โดยใช้ plugin ของแต่ละ 
# planner ตามที่กำหนดใน parameter ของ node นี้ โดยมีหน้าที่หลักคือให้แผนการเดินทางไปยังจุดปลายทางที่กำหนด 
# โดยคำนึงถึงข้อมูลต่างๆ เช่น แผนที่สิ่งแวดล้อม, ตำแหน่งปัจจุบัน, ตำแหน่งปลายทาง, อุปกรณ์เซ็นเซอร์เพื่อช่วยในการสร้าง
# แผนการเดินทางที่มีประสิทธิภาพสูงสุดและปลอดภัย โดยเมื่อคำนวณเสร็จแล้ว จะส่งเส้นทางไปยัง controller_server 
# สำหรับทำการควบคุมการเคลื่อนที่ของหุ่นยนต์ในเส้นทางที่คำนวณได้
  ros__parameters:
    expected_planner_frequency: 20.0 # ความถี่ที่คาดหวังในการเรียกใช้แพลนเนอร์ ในหน่วย Hz
    use_sim_time: False # กำหนดให้ใช้เวลาจำลองหรือไม่ (True หรือ False)
    planner_plugins: ["GridBased"] # ชื่อแพล็นเนอร์ที่จะถูกโหลดขึ้นมา GridBased

    GridBased: # GridBased เป็นการกำหนดค่าสำหรับแพลนเนอร์ประเภท Grid-based (หรือชื่อเต็มว่า Grid-Based NavFn) ซึ่งเป็นแพลนเนอร์ที่ใช้ในการวางแผนเส้นทางบนกริด
      plugin: "nav2_navfn_planner/NavfnPlanner" # ชื่อแพล็นเนอร์ NavFn ที่จะถูกโหลดขึ้นมา
      tolerance: 0.5 # รัศมีของจุดเป้าหมายที่ยอมรับได้ (ในหน่วยเมตร)
      use_astar: false # กำหนดให้ใช้ A* algorithm หรือไม่ (True หรือ False)
      allow_unknown: true # กำหนดให้ระบบยอมรับพื้นที่ที่ไม่ทราบข้อมูลเป็นพื้นที่ปลอดภัยหรือไม่ (True หรือ False)

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: True
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_theta_star_planner/ThetaStarPlanner"
#       how_many_corners: 8
#       w_euc_cost: 1.0
#       w_traversal_cost: 2.0
#       w_heuristic_cost: 1.0

smoother_server: # กำหนดพารามิเตอร์ของโหนด smoother_server ในระบบ ROS สำหรับการทำหุ่นยนต์เคลื่อนที่ในสภาวะจริง
  ros__parameters:
    use_sim_time: False # กำหนดว่าโหนดนี้จะใช้เวลาจริงหรือไม่ (ในกรณีนี้เป็น False)
    smoother_plugins: ["simple_smoother"] # # กำหนดชื่อของ plugin ที่จะใช้ในการ smoothing (ในกรณีนี้ใช้ plugin simple_smoother)
    simple_smoother: #กำหนดพารามิเตอร์สำหรับ plugin simple_smoother
      plugin: "nav2_smoother::SimpleSmoother" # plugin: กำหนดชื่อของ plugin ที่จะใช้ในการ smoothing (ในกรณีนี้เป็น nav2_smoother::SimpleSmoother)
      tolerance: 1.0e-10 # กำหนดค่า tolerance สำหรับการ smoothing
      max_its: 1000 # กำหนดจำนวนการวนรอบสูงสุดสำหรับการ smoothing
      do_refinement: True # กำหนดว่าจะทำ refinement หลังจาก smoothing หรือไม่ (ในกรณีนี้เป็น True)

behavior_server: # ROS สำหรับโหนด behavior_server ซึ่งเป็นส่วนหนึ่งของ ROS 2 Navigation Stack ที่ใช้สำหรับควบคุมพฤติกรรมการเคลื่อนที่ของหุ่นยนต์ในสภาพแวดล้อมที่มีอุปสรรค
  ros__parameters:
    # local_costmap_topic: local_costmap/costmap_raw
    # local_footprint_topic: local_costmap/published_footprint
    # global_costmap_topic: global_costmap/costmap_raw
    # global_footprint_topic: global_costmap/published_footprint    
    costmap_topic: local_costmap/costmap_raw
    # costmap_topic: ชื่อของ topic ที่ใช้สำหรับรับข้อมูล costmap ซึ่งเป็นแผนที่ที่ใช้สำหรับวางแผนเส้นทางของหุ่นยนต์ โดย topic นี้จะรับข้อมูลเป็น binary occupancy grid ที่แสดงสถานะของช่องว่างและขอบเขตของอุปสรรคที่อยู่รอบๆ หุ่นยนต์
    footprint_topic: local_costmap/published_footprint 
    # ชื่อของ topic ที่ใช้สำหรับรับข้อมูลรูปร่างของหุ่นยนต์ โดยฟิวเจอร์นี้จะเป็นค่าพิกัดของจุดบนผิวภายนอกของรูปร่างหุ่นยนต์ ซึ่งจะใช้เพื่อตรวจสอบการชนของหุ่นยนต์กับอุปสรรค   
    cycle_frequency: 10.0 # ความถี่ของการทำงานของโหนด behavior_server โดยเป็นค่าเฉลี่ยของอัตราการประมวลผลต่อวินาที
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    #behavior_plugins เป็น parameter ของ controller_server ที่กำหนดว่า controller จะสามารถเลือกใช้ behavior plugin ได้หลากหลายชนิดขึ้นอยู่กับสถานการณ์ 
    spin: # หมุนหัวเพื่อเตรียมตัวสำหรับการเปลี่ยนทิศทาง ใช้เมื่อต้องการหมุนรอบตัวหุ่นยนต์เพื่อเตรียมเปลี่ยนทิศทางการเดินทาง
      plugin: "nav2_behaviors/Spin"
    backup: # สำหรับถอยหลังหรือถอยกลับจากสถานการณ์ที่ไม่เหมาะสม เช่น ถอยหลังเมื่อเจอสิ่งกีดขวางหน้าทาง
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading: # สำหรับขับเคลื่อนหุ่นยนต์ในทิศทางที่ต้องการ โดยใช้ตำแหน่งของหัวเป็นพื้นฐานในการควบคุมทิศทางการเดินทาง
      plugin: "nav2_behaviors/DriveOnHeading"
    wait: #  ใช้สำหรับรอสั่งงานถัดไปโดยไม่ทำอะไรเลยจนกว่าจะได้รับคำสั่งใหม่
      plugin: "nav2_behaviors/Wait"
    assisted_teleop: #สำหรับควบคุมทางไกลของหุ่นยนต์โดยใช้โทรศัพท์มือถือหรือเครื่องคอมพิวเตอร์ สามารถใช้ในการควบคุมหุ่นยนต์ให้เคลื่อนที่ไปยังตำแหน่งที่ต้องการได้
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom # ชื่อของโครงสร้างโลกที่ใช้สำหรับการนำทาง ซึ่งในที่นี้เป็น odom หมายความว่าโครงสร้างโลกที่ใช้สำหรับแสดงตำแหน่งของหุ่นยนต์เป็นโลกแบบอัตโนมัติ ซึ่งเป็นโครงสร้างโลกที่พื้นหลังสำหรับการทำงานนี้
    # local_frame: odom
    robot_base_frame: base_link # ชื่อของโครงสร้างโลกที่เป็นฐานของหุ่นยนต์ ซึ่งในที่นี้เป็น base_link หมายความว่าจุดเริ่มต้นสำหรับการเคลื่อนที่ของหุ่นยนต์จะอยู่ที่ base_link
    transform_tolerance: 1.2 # ค่าความคลาดเคลื่อนในการแปลงแปลงโครงสร้างโลกเมื่อนำมาใช้งาน โดยกำหนดไว้เป็น 1.2 เป็นวินาที
    use_sim_time: False # กำหนดให้ใช้เวลาจริง (False) ซึ่งหมายความว่าโหนดนี้จะใช้เวลาจริงจากระบบเครื่องมือที่ใช้ควบคุมหุ่นยนต์
    simulate_ahead_time: 2.0 # กำหนดเวลาที่จะถือว่าหุ่นยนต์ได้เคลื่อนที่สำเร็จเมื่อไปถึงจุดหมาย โดยกำหนดไว้เป็น 2.0 เป็นวินาที
    max_rotational_vel: 0.09 # ความเร็วมุมสูงสุดที่ตัวควบคุมสามารถใช้ในการหมุนได้ (หน่วย rad/s)
    min_rotational_vel: 0.05 #  ความเร็วมุมขั้นต่ำที่ตัวควบคุมต้องใช้ในการหมุน (หน่วย rad/s)
    rotational_acc_lim: 3.2 # : ขีดจำกัดความเร่งมุมของหุ่นยนต์ (หน่วย rad/s^2)

robot_state_publisher: 
  ros__parameters:
    use_sim_time: False # กำหนดให้ใช้เวลาจริง (False) 
#robot_state_publisher เป็นโมดูลใน ROS ที่ทำหน้าที่เปลี่ยนข้อมูลของสถานะของหุ่นยนต์จากตัวแปรในโปรแกรม ROS เป็นข้อมูลในรูปแบบของ TF (Transformation) เพื่อให้โปรแกรม ROS อื่นๆ สามารถเข้าใช้งานได้อย่างถูกต้อง 

waypoint_follower: # ติดตาม point เพื่อ follower
  ros__parameters:
    use_sim_time: False # กำหนดให้ใช้เวลาจำลองหรือไม่ (True หรือ False)
    loop_rate: 20 # อัปเดตจุดเดินทางใหม่ทุกๆ X ฟรีเคว็ทต่อวินาที
    stop_on_failure: false # ยุดการติดตามเส้นทางเมื่อเกิดข้อผิดพลาด (True หรือ False)
    waypoint_task_executor_plugin: "wait_at_waypoint" # ชื่อของปลั๊กอินในการดำเนินการโหนดที่จะใช้ในการปฏิบัติงาน
    wait_at_waypoint: # ปลั๊กอินในการหยุดชั่วคราวที่จุดเดินทาง
      plugin: "nav2_waypoint_follower::WaitAtWaypoint" # ชื่อของปลั๊กอินในการดำเนินการ
      enabled: True # เปิดใช้งานหรือไม่ (True หรือ False)
      waypoint_pause_duration: 200 # ระยะเวลาที่จะหยุดชั่วคราว (หน่วยเป็นมิลลิวินาที) ณ จุดเดินทาง

velocity_smoother: # เป็นโหนดในระบบควบคุมการเคลื่อนที่ของหุ่นยนต์ 
  ros__parameters:
    use_sim_time: False # กำหนดให้ใช้เวลาจริง (False) ซึ่งหมายความว่าโหนดนี้จะใช้เวลาจริงจากระบบเครื่องมือที่ใช้ควบคุมหุ่นยนต์
    smoothing_frequency: 20.0 # ความถี่ในการส่งสัญญาณของระบบควบคุมการเคลื่อนที่
    scale_velocities: False # กำหนดว่าจะเปลี่ยนแปลงความเร็วหรือไม่
    feedback: "OPEN_LOOP" # การตอบกลับของระบบควบคุม (OPEN_LOOP หรือ CLOSED_LOOP)
    max_velocity: [0.2, 0.0, 0.12] # ความเร็วสูงสุดในแต่ละแกน x, y, และ theta
    min_velocity: [-0.2, 0.0, -0.12] # ความเร็วต่ำสุดในแต่ละแกน x, y, และ theta
    max_accel: [2.5, 0.0, 3.2] # ค่าเร่งสูงสุดในแต่ละแกน x, y, และ theta
    max_decel: [-2.5, 0.0, -3.2] # ค่าเร่งสูงสุดในแต่ละแกน x, y, และ theta
    odom_topic: "odom" #ชื่อ topic ที่ใช้สำหรับการติดตามตำแหน่งของหุ่นยนต์
    odom_duration: 0.1 #  ช่วงเวลาที่ใช้ในการคำนวณตำแหน่งของหุ่นยนต์จาก odometry
    deadband_velocity: [0.0, 0.0, 0.0] #  ค่าความเร็วที่ถือว่าเป็น "ศูนย์" ที่ไม่ต้องปรับปรุง
    velocity_timeout: 1.0 #  เวลาที่เมื่อเกินแล้วจะทำให้หุ่นยนต์หยุดทำงาน

