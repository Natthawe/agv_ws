amcl: #ระบุตำแหน่งของหุ่นยนต์ในแผนที่ Adaptive Monte-Carlo Localizer
  ros__parameters: #ค่าพารามิเตอร์หรือ การกำหนดค่าของ Ros
    use_sim_time: False  # เป็นการกำหนดให้เวลาที่ใช้ในการทำ simulation เป็นเวลาจริง เพื่อให้สามารถใช้ข้อมูลเวลาจริงได้ในการประมวลผล false = ปิด true = เปิด
    alpha1: 0.2 # alpha1: เป็นค่าพารามิเตอร์ที่ใช้ในการปรับความไม่แน่นอนของการเคลื่อนที่ของหุ่นยนต์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน x
    alpha2: 0.2 # alpha2: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับความเร็วในการหมุนของหุ่นยนต์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน y
    alpha3: 0.2 # alpha3: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับการเปลี่ยนแปลงในการหมุนของหุ่นยนต์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน z
    alpha4: 0.2 # alpha4: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับการวัดระยะห่างด้วยเซ็นเซอร์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกน x,y,z
    alpha5: 0.2 # alpha5: เป็นค่าพารามิเตอร์ที่ใช้ปรับความไม่แน่นอนเกี่ยวกับการวัดระยะห่างด้วยเซ็นเซอร์ ค่านี้มีผลต่อการทำนายตำแหน่งในแกนการหมุนของหุ่นยนต์ 
    base_frame_id: "base_link"  # ระบุชื่อของ frame หรือ coordinate system ที่ใช้เป็นตัวอ้างอิงในการติดตามตำแหน่งของหุ่นยนต์ ซึ่งในที่นี้คือ "base_link" 
    beam_skip_distance: 0.2  # เป็นระยะห่างระหว่างการส่ง beam ที่ใช้ในการสแกนแผนที่ หากหุ่นยนต์เคลื่อนที่เป็นระยะทางน้อยกว่า beam_skip_distance และยังไม่มีอุปสรรคของสิ่งกีดขวางในเส้นทางหุ่นยนต์จะไม่สแกนแผนที่ แต่จะเคลื่อนไปต่อไปโดยไม่ต้องทำการสแกน
    beam_skip_error_threshold: 0.9  # เป็นค่าที่ใช้ในการกำหนด threshold ของความคลาดเคลื่อนที่สามารถยอมรับได้ในการทำนายตำแหน่งของหุ่นยนต์ หากความคลาดเคลื่อนของการทำนายตำแหน่งของหุ่นยนต์มีค่าต่ำกว่า beam_skip_error_threshold หุ่นยนต์จะทำการสแกนแผนที่
    beam_skip_threshold: 0.3  # เป็นค่า threshold ที่ใช้ในการกำหนดความแม่นยำของการสแกนแผนที่ หากค่าความแม่นยำของการสแกนแผนที่มีค่ามากกว่า beam_skip_threshold หุ่นยนต์จะทำการสแกนแผนที่
    do_beamskip: false # เป็นค่า boolean ที่ใช้กำหนดว่าหุ่นยนต์จะใช้ beamskip หรือไม่ หากเป็นค่า true หุ่นยนต์จะใช้ beamskip เพื่อลดความซับซ้อนในการสแกนแผนที่ แต่หากเป็นค่า false หุ่นยนต์จะสแกนแผนที่ทุกจุดที่เดินทางผ่าน
    global_frame_id: "map"  # เป็นชื่อของ global frame หรือ coordinate system ที่ใช้เป็นตัวอ้างอิงในการกำหนดตำแหน่งของหุ่นยนต์บนแผนที่ ซึ่งในที่นี้คือ "map"
    lambda_short: 0.1 # เป็นค่าพารามิเตอร์ที่ใช้ในการปรับเปลี่ยนน้ำหนักของการทำนายตำแหน่งหากมีการวัดความสั้นโดยไม่สามารถตรวจจับสิ่งกีดขวางได้ โดยที่ค่า lambda_short มากขึ้นจะทำให้เพิ่มความเชื่อถือในการทำนายตำแหน่งของหุ่นยนต์เมื่อไม่สามารถตรวจจับสิ่งกีดขวางได้
    laser_likelihood_max_dist: 2.0 # เป็นระยะทางสูงสุดที่หุ่นยนต์สามารถเลือกใช้ค่าความน่าจะเป็นในการตัดสินใจว่าสิ่งกีดขวางอยู่ในพื้นที่ตรวจจับของเลเซอร์สแกนเท่านั้น โดยหากสิ่งกีดขวางอยู่ห่างจากหุ่นยนต์มากกว่าระยะทางนี้จะไม่มีผลกับการตัดสินใจ
    laser_max_range: 25.0 # เป็นระยะทางสูงสุดที่เลเซอร์สแกนสามารถตรวจจับข้อมูลได้ ช่วงการสแกนสูงสุดที่ต้องพิจารณา -1.0 จะทำให้ใช้ช่วงสูงสุดของเลเซอร์ที่รายงาน
    laser_min_range: 0.1 # เป็นระยะทางต่ำสุดที่เลเซอร์สแกนตรวจจับข้อมูลได้ ช่วงการสแกนขั้นต่ำที่ต้องพิจารณา -1.0 จะทำให้ใช้ช่วงขั้นต่ำที่รายงานของเลเซอร์
    laser_model_type: "likelihood_field"  # เป็นโมเดลที่ใช้ในการคำนวณความน่าจะเป็นของตำแหน่งของหุ่นยนต์ตามข้อมูลที่ได้รับจากเลเซอร์สแกน โดยในที่นี้เป็น "likelihood_field" ซึ่งเป็นโมเดลที่ใช้แผนที่ของฟิลด์ความน่าจะเป็นในการคำนวณความน่าจะเป็นของตำแหน่งของหุ่นยนต์และข้อมูลจากเลเซอร์สแกน
    max_beams: 60 # เป็นจำนวนสูงสุดของแสงเลเซอร์ที่ใช้ในการสร้างแผนที่ลักษณะเส้นทางเพื่อใช้ในการประมาณตำแหน่งของหุ่นยนต์
    max_particles: 2000 # เป็นจำนวนสูงสุดของอนุภาคที่ระบบจะใช้ในการประมาณค่าตำแหน่งของหุ่นยนต์
    min_particles: 500 # เป็นจำนวนต่ำสุดของอนุภาคที่ระบบจะใช้ในการประมาณค่าตำแหน่งของหุ่นยนต์ หากจำนวนอนุภาคน้อยกว่าจำนวนนี้ ระบบจะทำการสร้างอนุภาคเพิ่มเติมเพื่อให้จำนวนอนุภาคมากขึ้นในขณะที่ระบบพยายามปรับปรุงค่าความน่าจะเป็นในการหาตำแหน่งของหุ่นยนต์ให้แม่นยำมากขึ้น
    odom_frame_id: "odom" # เป็น ID ของกรอบอ้างอิง odom (odometry) ที่ใช้ในการประมาณตำแหน่งของหุ่นยนต์
    pf_err: 0.05 # ตัวกรองจะพิจารณาการประมาณท่าทางที่ถูกต้องก็ต่อเมื่อข้อผิดพลาดโดยประมาณในตำแหน่งของหุ่นยนต์น้อยกว่าหรือเท่ากับ 5 เซนติเมตร
    pf_z: 0.99 # ค่าที่สูงกว่า pf_z จะส่งผลให้มีการกระจายที่กว้างขึ้นและน้ำหนักของอนุภาคลดลง ในขณะที่ค่าที่ต่ำกว่าจะส่งผลให้มีการกระจายที่แคบลงและมีน้ำหนักที่มากขึ้น ค่าเบี่ยงเบนมาตรฐานของแบบจำลองฟิลด์ความน่าจะเป็นจะคูณด้วย 0.99 เพื่อให้ได้ค่าสุดท้ายที่ใช้ในการคำนวณน้ำหนักของแต่ละอนุภาค
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0 # จะถูกใช้เพื่อควบคุมความเร็วของพฤติกรรมการกู้คืนเมื่อการประมาณท่าทางของหุ่นยนต์ เป็นค่าที่ใช้ในการกู้คืนตำแหน่งเมื่อหุ่นยนต์พบกับปัญหาในการทำงาน ค่าเหล่านี้เป็นตัวกำหนดความเร็วของการเคลื่อนไหวในการกู้คืนตำแหน่ง
    resample_interval: 1 # เป็นช่วงเวลาที่ระบบจะทำการสุ่มเลือกอนุภาคใหม่ในกรณีที่จำนวนอนุภาคไม่พอดีกับความต้องการของระบบในการประมาณค่าตำแหน่งของหุ่นยนต์ ค่านี้จะกำหนดว่าอนุภาคจะถูกสุ่มเลือกใหม่ทุกๆ กี่รอบการทำงานของระบบ โดยค่าที่แนะนำคือ 1 หมายความว่าระบบจะทำการสุ่มเลือกอนุภาคใหม่ทุกๆ รอบการทำงานของระบบ
    robot_model_type: "nav2_amcl::DifferentialMotionModel" # คือการกำหนดโมเดลของหุ่นยนต์ที่ใช้ในการทำนายการเคลื่อนที่ ในที่นี้เป็น Differential Motion Model ซึ่งใช้ข้อมูลเซ็นเซอร์เลเซอร์สแกนของหุ่นยนต์ในการทำนายตำแหน่ง
    save_pose_rate: 0.5  # อัตราสูงสุด (Hz) ที่จัดเก็บท่าทางและความแปรปรวนร่วมโดยประมาณล่าสุดไปยังเซิร์ฟเวอร์พารามิเตอร์ ในตัวแปร ~initial_pose_* และ ~initial_cov_* ท่าที่บันทึกไว้นี้จะใช้ในการวิ่งครั้งต่อไปเพื่อเริ่มต้นตัวกรอง (-1.0 เพื่อปิดใช้งาน)
    sigma_hit: 0.2 # คือค่าส่วนเบี่ยงเบนจากการเปรียบเทียบระยะห่างจากข้อมูลเซ็นเซอร์เลเซอร์สแกน (observed) กับแผนที่ (expected)
    tf_broadcast: true # ตั้งค่านี้เป็นเท็จเพื่อป้องกันไม่ให้ amcl เผยแพร่การแปลงระหว่าง global frame and the odometry frame
    transform_tolerance: 1.0 # คือค่าที่ใช้กำหนดให้ระบบจัดการตำแหน่งใน ROS มีความยืดหยุ่นในการส่งข้อมูลตำแหน่งได้ 1 วินาที
    update_min_a: 0.2 # ต้องมีการเคลื่อนไหวแบบหมุน ก่อนดำเนินการอัปเดตตัวกรอง
    update_min_d: 0.25 # ต้องมีการเคลื่อนไหวการแปลก่อนดำเนินการอัปเดตตัวกรอง
    z_hit: 0.5 # น้ำหนักผสมสำหรับส่วน z_hit ของโมเดล ผลรวมของน้ำหนัก z ที่ใช้ทั้งหมดต้องเป็น 1 บีมใช้ทั้งหมด 4 ตัว likelihood model uses z_hit and z_rand, ความเป็นไปได้ของการตรงกันของชนิดของเลเซอร์สแกน (likelihood) เมื่อหุ่นยนต์เข้าใกล้กับอุปสรรค
    z_max: 0.05 # น้ำหนักผสมสำหรับส่วน z_max ของโมเดล ผลรวมของน้ำหนัก z ที่ใช้ทั้งหมดต้องเป็น 1 บีมใช้ทั้งหมด 4 ตัว likelihood model uses z_hit and z_rand, ความเป็นไปได้สูงสุดของการพบอุปสรรคจากเลเซอร์สแกน
    z_rand: 0.5 # น้ำหนักผสมสำหรับส่วน z_rand ของโมเดล ผลรวมของน้ำหนัก z ที่ใช้ทั้งหมดต้องเป็น 1 บีมใช้ทั้งหมด 4 ตัว likelihood model uses z_hit and z_rand, ความเป็นไปได้ของการสุ่มพิกัดจากแผนที่
    z_short: 0.05  # น้ำหนักผสมสำหรับส่วน z_short ของโมเดล ผลรวมของน้ำหนัก z ที่ใช้ทั้งหมดต้องเป็น 1 บีมใช้ทั้งหมด 4 ตัว likelihood model uses z_hit and z_rand, ความเป็นไปได้ของการตัดเลเซอร์สแกนในระยะสั้น
    scan_topic: scan # เป็นชื่อ topic สำหรับรับข้อมูลเลเซอร์
    # set_initial_pose: True # ตั้งค่าท่าทางเริ่มต้นจากพารามิเตอร์ initial_pose* แทนที่จะรอข้อความ initial_pose
    # initial_pose.x: 1.226
    # initial_pose.y: 0.031
    # initial_pose.yaw: 0.0

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    transform_tolerance: 0.1
    bt_loop_duration: 10
    default_server_timeout: 10
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    odom_topic: /odom
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    controller_plugin_types: ["teb_local_planner::TebLocalPlannerROS"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.25

    # TEB parameters
    FollowPath:
      plugin: "teb_local_planner::TebLocalPlannerROS"
      footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
        type: "polygon"
        vertices: "[[-0.127,-0.34], [0.863,-0.34], [0.863,0.34], [-0.127,0.34]]"

      # // Trajectory
      teb_autoresize: True
      dt_ref: 0.3
      dt_hysteresis: 0.1
      min_samples: 3
      max_samples: 20      
      global_plan_overwrite_orientation: true
      allow_init_with_backwards_motion: true #(this is only recommended if the robot is equipped with rear sensors)
      global_plan_viapoint_sep: 1.0     
      # via_points_ordered: true
      max_global_plan_lookahead_dist: 1.5  
      # global_plan_prune_distance: 1.0
      # exact_arc_length: true
      feasibility_check_no_poses: 5
      publish_feedback: true
      control_look_ahead_poses: 5


    # Robot
      max_vel_x: 0.5
      max_vel_x_backwards: 0.5
      max_vel_theta: 0.5
      acc_lim_x: 0.5
      acc_lim_theta: 0.5
      is_footprint_dynamic: True
      min_turning_radius: 0.33 #รัศมีวงเลี้ยวต่ำสุดของหุ่นยนต์คาร์ไลค์ (ตั้งค่าเป็นศูนย์สำหรับหุ่นยนต์ดิฟไดรฟ์)
      wheelbase: 0.76 #ระยะห่างระหว่างเพลาล้อหลังกับเพลาหน้า
      cmd_angle_instead_rotvel: False

    # GoalTolerance
      xy_goal_tolerance: 0.2
      yaw_goal_tolerance: 0.25
      free_goal_vel: false 

    # Obstacles
      min_obstacle_dist: 0.3    
      inflation_dist: 0.55
      dynamic_obstacle_inflation_dist: 0.55
      # include_dynamic_obstacles: true
      include_costmap_obstacles: true
      costmap_obstacles_behind_robot_dist: 2.0
      obstacle_poses_affected: 25
      costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
      costmap_converter_spin_thread: true
      costmap_converter_rate: 5

    # Optimization
      # no_inner_iterations: 5
      # no_outer_iterations: 4
      optimization_activate: true
      weight_max_vel_x: 2.0
      weight_max_vel_theta: 2.0
      weight_acc_lim_x: 1.0
      weight_acc_lim_theta: 2.0
      weight_kinematics_nh: 2000.0
      weight_kinematics_forward_drive: 10000.0
      weight_obstacle: 5.0
      weight_inflation: 1.0
      weight_dynamic_obstacle: .0
      weight_dynamic_obstacle_inflation: 1.0
      weight_viapoint: 10.0
      penalty_epsilon: 0.02

    # Homotopy Class Planner
      enable_homotopy_class_planning: false
      enable_multithreading: false
      max_number_classes: 5
      selection_cost_hysteresis: 1.0
      # selection_obst_cost_scale: 100.0
      selection_viapoint_cost_scale: 1.0
      roadmap_graph_no_samples: 15
      roadmap_graph_area_width: 6.0
      roadmap_graph_area_length_scale: 1.0
      h_signature_prescaler: 0.6
      h_signature_threshold: 0.1
      obstacle_keypoint_offset: 0.1
      obstacle_heading_threshold: 0.45 
      visualize_hc_graph: true

costmap_converter:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 20.0
      publish_frequency: 20.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.05
      # robot_radius: 0.22
      footprint: "[[-0.127,-0.34], [0.863,-0.34], [0.863,0.34], [-0.127,0.34]]"
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.55
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True 

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      # robot_radius: 0.22
      footprint: "[[-0.127,-0.34], [0.863,-0.34], [0.863,0.34], [-0.127,0.34]]"
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.55
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: False

    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false                # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
      max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: "REEDS_SHEPP"    # For Hybrid DUBIN, REEDS_SHEPP
      cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      minimum_turning_radius: 0.33        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 2.1 #2.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: False      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.  
      smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: False
#     planner_plugins: ["GridBased"]

#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: True
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_theta_star_planner/ThetaStarPlanner"
#       how_many_corners: 8
#       w_euc_cost: 1.0
#       w_traversal_cost: 2.0
#       w_heuristic_cost: 1.0

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    # local_costmap_topic: local_costmap/costmap_raw
    # local_footprint_topic: local_costmap/published_footprint
    # global_costmap_topic: global_costmap/costmap_raw
    # global_footprint_topic: global_costmap/published_footprint    
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint    
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    # local_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 1.2
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.09
    min_rotational_vel: 0.05
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

# velocity_smoother:
#   ros__parameters:
#     use_sim_time: False
#     smoothing_frequency: 20.0
#     scale_velocities: False
#     feedback: "OPEN_LOOP"
#     max_velocity: [0.2, 0.0, 0.12]
#     min_velocity: [-0.2, 0.0, -0.12]
#     max_accel: [2.5, 0.0, 3.2]
#     max_decel: [-2.5, 0.0, -3.2]
#     odom_topic: "odom"
#     odom_duration: 0.1
#     deadband_velocity: [0.0, 0.0, 0.0]
#     velocity_timeout: 1.0

velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [1.0, 0.0, 1.0]  #[x, y, theta]
    min_velocity: [-1.0, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0